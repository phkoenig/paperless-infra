/**
 * üóëÔ∏è Google Drive Cleanup Script
 * 
 * ZWECK: L√∂scht den veralteten "Paperless-Attachments" Ordner
 * 
 * HINTERGRUND:
 * - Vor v4.2: Zwei separate Ordner (Paperless-Emails & Paperless-Attachments)
 * - Ab v4.2: Nur noch ein Ordner (Paperless-Emails mit Anh√§ngen drin)
 * - Dieser Script r√§umt die Legacy-Ordner auf
 * 
 * VERWENDUNG:
 * 1. √ñffne Google Apps Script Editor
 * 2. Erstelle neues Script mit diesem Code
 * 3. F√ºhre "cleanupLegacyAttachmentsFolder()" aus
 * 4. √úberpr√ºfe Status mit "checkCleanupStatus()"
 * 
 * SICHERHEIT:
 * - Ordner werden NUR in den Papierkorb verschoben (nicht permanent gel√∂scht!)
 * - Du kannst sie innerhalb 30 Tagen wiederherstellen
 * - Paperless-Emails Ordner wird NICHT anger√ºhrt!
 * 
 * @author Philip K√∂nig
 * @version 1.0
 * @date 2025-10-18
 */

// ============================================
// KONFIGURATION
// ============================================

const LEGACY_FOLDER_NAME = 'Paperless-Attachments';
const CURRENT_FOLDER_NAME = 'Paperless-Emails';

// ============================================
// HAUPT-FUNKTIONEN
// ============================================

/**
 * üóëÔ∏è L√∂scht den veralteten Paperless-Attachments Ordner
 * SAFE: Verschiebt nur in Papierkorb, kein permanentes L√∂schen!
 */
function cleanupLegacyAttachmentsFolder() {
  console.log('üóëÔ∏è LEGACY CLEANUP GESTARTET');
  console.log('='.repeat(50));
  console.log(`Ziel: "${LEGACY_FOLDER_NAME}" Ordner l√∂schen`);
  console.log('='.repeat(50));
  
  try {
    // Suche nach Paperless-Attachments Ordner
    const folders = DriveApp.getFoldersByName(LEGACY_FOLDER_NAME);
    
    let deletedCount = 0;
    
    while (folders.hasNext()) {
      const folder = folders.next();
      const folderId = folder.getId();
      const folderUrl = folder.getUrl();
      
      // Pr√ºfe Anzahl der Unterordner
      const subFolders = [];
      const subFoldersIterator = folder.getFolders();
      while (subFoldersIterator.hasNext()) {
        subFolders.push(subFoldersIterator.next());
      }
      
      const fileCount = countFilesRecursively(folder);
      
      console.log(`\nüìÇ Gefunden: "${folder.getName()}"`);
      console.log(`   ID: ${folderId}`);
      console.log(`   URL: ${folderUrl}`);
      console.log(`   Unterordner: ${subFolders.length}`);
      console.log(`   Dateien (rekursiv): ${fileCount}`);
      
      // Sicherheitsabfrage
      if (subFolders.length > 0 || fileCount > 0) {
        console.log(`\n‚ö†Ô∏è  WARNUNG: Ordner enth√§lt ${subFolders.length} Unterordner und ${fileCount} Dateien!`);
        console.log(`   Diese werden in den Papierkorb verschoben (wiederherstellbar innerhalb 30 Tagen)`);
      }
      
      // In Papierkorb verschieben
      folder.setTrashed(true);
      deletedCount++;
      
      console.log(`\n‚úÖ Ordner in Papierkorb verschoben!`);
      console.log(`   Wiederherstellung: Google Drive ‚Üí Papierkorb ‚Üí "${folder.getName()}" ‚Üí Wiederherstellen`);
    }
    
    if (deletedCount === 0) {
      console.log(`\n‚ú® Kein "${LEGACY_FOLDER_NAME}" Ordner gefunden - bereits sauber!`);
    } else {
      console.log(`\nüéâ CLEANUP ABGESCHLOSSEN!`);
      console.log(`   Gel√∂scht: ${deletedCount} Legacy-Ordner`);
    }
    
    // Status nach Cleanup
    console.log('\n' + '='.repeat(50));
    console.log('üìä AKTUELLER STATUS:');
    checkCleanupStatus();
    
    return {
      success: true,
      deletedFolders: deletedCount,
      message: `${deletedCount} Legacy-Ordner in Papierkorb verschoben`
    };
    
  } catch (error) {
    console.error('‚ùå FEHLER beim Cleanup:', error.message);
    console.error(error.stack);
    
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * üîç Status Check - Zeigt aktuelle Ordner-Struktur
 */
function checkCleanupStatus() {
  console.log('üîç GOOGLE DRIVE ORDNER STATUS');
  console.log('='.repeat(50));
  
  try {
    // Paperless-Emails (aktuell)
    const currentFolders = DriveApp.getFoldersByName(CURRENT_FOLDER_NAME);
    let currentCount = 0;
    while (currentFolders.hasNext()) {
      const folder = currentFolders.next();
      currentCount++;
      
      const subFolders = [];
      const subFoldersIterator = folder.getFolders();
      while (subFoldersIterator.hasNext()) {
        subFolders.push(subFoldersIterator.next());
      }
      
      console.log(`\n‚úÖ "${CURRENT_FOLDER_NAME}" (AKTUELL)`);
      console.log(`   URL: ${folder.getUrl()}`);
      console.log(`   E-Mail Ordner: ${subFolders.length}`);
    }
    
    // Paperless-Attachments (legacy)
    const legacyFolders = DriveApp.getFoldersByName(LEGACY_FOLDER_NAME);
    let legacyCount = 0;
    while (legacyFolders.hasNext()) {
      const folder = legacyFolders.next();
      legacyCount++;
      
      const subFolders = [];
      const subFoldersIterator = folder.getFolders();
      while (subFoldersIterator.hasNext()) {
        subFolders.push(subFoldersIterator.next());
      }
      
      console.log(`\n‚ö†Ô∏è  "${LEGACY_FOLDER_NAME}" (VERALTET!)`);
      console.log(`   URL: ${folder.getUrl()}`);
      console.log(`   Attachment Ordner: ${subFolders.length}`);
      console.log(`   ‚Üí Sollte gel√∂scht werden!`);
    }
    
    // Zusammenfassung
    console.log('\n' + '='.repeat(50));
    if (legacyCount === 0) {
      console.log('‚ú® PERFEKT! Nur noch der aktuelle Ordner vorhanden.');
    } else {
      console.log(`‚ö†Ô∏è  WARNUNG: ${legacyCount} Legacy-Ordner gefunden!`);
      console.log('   F√ºhre "cleanupLegacyAttachmentsFolder()" aus zum Aufr√§umen.');
    }
    
    return {
      currentFolders: currentCount,
      legacyFolders: legacyCount,
      cleanupNeeded: legacyCount > 0
    };
    
  } catch (error) {
    console.error('‚ùå Fehler beim Status Check:', error.message);
    return { error: error.message };
  }
}

/**
 * üîÑ Wiederherstellung aus Papierkorb
 * Falls du den Ordner versehentlich gel√∂scht hast
 */
function restoreLegacyFolder() {
  console.log('üîÑ WIEDERHERSTELLUNG');
  console.log('='.repeat(50));
  console.log('‚ö†Ô∏è  Diese Funktion kann Ordner NICHT automatisch wiederherstellen!');
  console.log('\nMANUELLE WIEDERHERSTELLUNG:');
  console.log('1. √ñffne Google Drive (drive.google.com)');
  console.log('2. Klicke links auf "Papierkorb"');
  console.log(`3. Suche nach "${LEGACY_FOLDER_NAME}"`);
  console.log('4. Rechtsklick ‚Üí "Wiederherstellen"');
  console.log('\nOrdner ist 30 Tage lang wiederherstellbar!');
}

// ============================================
// HELPER FUNKTIONEN
// ============================================

/**
 * Z√§hlt Dateien rekursiv in einem Ordner
 */
function countFilesRecursively(folder) {
  let count = 0;
  
  // Dateien im aktuellen Ordner
  const filesIterator = folder.getFiles();
  while (filesIterator.hasNext()) {
    filesIterator.next();
    count++;
  }
  
  // Rekursiv in Unterordner
  const foldersIterator = folder.getFolders();
  while (foldersIterator.hasNext()) {
    const subFolder = foldersIterator.next();
    count += countFilesRecursively(subFolder);
  }
  
  return count;
}

// ============================================
// USAGE EXAMPLES
// ============================================

/**
 * BEISPIEL 1: Status pr√ºfen (safe, √§ndert nichts)
 */
function example_checkStatus() {
  checkCleanupStatus();
}

/**
 * BEISPIEL 2: Legacy-Ordner aufr√§umen
 */
function example_cleanup() {
  // 1. Status pr√ºfen
  const status = checkCleanupStatus();
  
  // 2. Cleanup durchf√ºhren (falls n√∂tig)
  if (status.cleanupNeeded) {
    cleanupLegacyAttachmentsFolder();
  } else {
    console.log('‚ú® Kein Cleanup n√∂tig - alles sauber!');
  }
}

